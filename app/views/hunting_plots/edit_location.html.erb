<%
  page_title = "Editing Plot Location"
  provide(:title, page_title)
%>
<% content_for :head do %>
  <script type="text/javascript">
  $(document).ready(
    function() {
      initializeMapHelper();
    }
  );

  var DIALOG_MODE_LOCATION = 1;
  var DIALOG_MODE_BOUNDARY = 2;

  var g_locationDialogInitialized = false;
  var g_mapHelper = null;
  var g_dialogMode = DIALOG_MODE_LOCATION;

  function showLocationPopup() {

    if (g_mapHelper == null) initializeMapHelper();
    g_mapHelper.setMode(MapsHelper.Mode.SetLocation);
    $('#addressSearch').show();

    $('#setLocationDialog').dialog('option', 'title', 'Set Plot Location');
    $('#setLocationDialog').dialog('open');
    g_dialogMode = DIALOG_MODE_LOCATION;
    return false;
  }

  function showBoundaryPopup() {
    try {
      if (g_mapHelper == null) initializeMapHelper();
      //g_mapHelper.hideMarker();
      g_mapHelper.setMode(MapsHelper.Mode.SetBoundary);
      g_mapHelper.editBoundary();
      $('#addressSearch').hide();
      $('#setLocationDialog').dialog('option', 'title', 'Set Plot Boundary');
      $('#setLocationDialog').dialog('open');
      g_dialogMode = DIALOG_MODE_BOUNDARY;
    }
    catch (e) {
      alert('The following error occurred: ' + e);
    }
    return false;
  }

  function mapDialogSaveHandler() {
    if (g_mapHelper.getMode() == MapsHelper.Mode.SetLocation) {
      var markerLocation = g_mapHelper.getMarkerLocation();
      $('#plot_location').val(formatWKTPoint( { lng: markerLocation.lng(), lat: markerLocation.lat() } ));
    }
    else {
      var boundaryVertices = g_mapHelper.getBoundaryVertices();
      $('#plot_boundary').val(formatWKTPolygon(boundaryVertices));
    }
  }

  function initializeMapHelper() {

    try {
      var mapOptions = {
        <%
        if !@hunting_plot.boundary.nil?
          view_window = rgeo_get_bounds(@hunting_plot.boundary)
        %>
        view_window: { sw: { lat: <%= view_window[:sw][:lat] %>, lng: <%= view_window[:sw][:lng] %> }, ne: { lat: <%= view_window[:ne][:lat] %>, lng: <%= view_window[:ne][:lng] %> } },
        <% else %>
        zoom: 12,
        <% end %>
        markerTitle: '<%=@hunting_plot.name%>'
      };

      var currentLocationCoordinates = $('#plot_location').val();
      if (!isNullOrEmpty(currentLocationCoordinates)) {
        mapOptions.center = parseWKTPoint(currentLocationCoordinates);
      }
      else if (!isDefinedAndNonNull(mapOptions.view_window)) {
        mapOptions.zoom = 5;
      }

      var currentBoundary = $('#plot_boundary').val();
      if (!isNullOrEmpty(currentBoundary)) {
        mapOptions.boundary = parseWKTPolygon(currentBoundary);
      }

      createMapHelper(mapOptions);

      // if this is a new plot by virtue of the fact we don't have coordinates, attempt to center the map on the user's current location
      if ((currentLocationCoordinates == null) && (navigator.geolocation))
      {
        navigator.geolocation.getCurrentPosition(
          function(position) {
            g_mapHelper.setCenter(position.coords.latitude, position.coords.longitude);
          }
        );
      }
    }
    catch (e) {
      alert('The following error occurred: ' + e);
    }
  }

  function createMapHelper(mapOptions) {
    g_mapHelper = new MapsHelper(document.getElementById("map-canvas"), mapOptions);
  }

  function showAddress(address) {
    g_mapHelper.setLocationByAddress(address);
  }
  </script>
<% end %>

<div id="addressSearch" style="padding:5px;">
  <form action="#" onsubmit="showAddress($('#searchValue').val()); return false;" role="form" class="form-inline">
    <div class="form-group">
      <label class="sr-only" for="searchValue">Search Address</label>
      <input type="text" size="50" class="form-control" id="searchValue" placeholder="Address, zip code, etc...">
    </div>
    <button type="submit" class="btn btn-default">Search</button>
  </form>
</div>
<div id="map-canvas" class="well well-sm" style="position:absolute; top:100px; left:0px; bottom:0px; right:0px;">
  Initializing map...
</div>
