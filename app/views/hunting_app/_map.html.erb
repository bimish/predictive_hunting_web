<% content_for :head do %>
<script type="text/javascript">
var g_memberLocations = null;
var g_huntingLocations = null;
function showMap() {
  if (typeof(g_map) == 'undefined') {
    var mapOptions = {
      showCenterMarker: false,
      mapTypeControl: false,
      streetViewControl: false,
      borderFillColor: '#cccccc',
      center: { lat: <%=@hunting_plot.location_coordinates.y()%>, lng: <%=@hunting_plot.location_coordinates.x()%> },
  <%
  if !@hunting_plot.boundary.nil?
      view_window = rgeo_get_bounds(@hunting_plot.boundary)
  %>
      view_window: { sw: { lat: <%= view_window[:sw][:lat] %>, lng: <%= view_window[:sw][:lng] %> }, ne: { lat: <%= view_window[:ne][:lat] %>, lng: <%= view_window[:ne][:lng] %> } },
      boundary: parseWKTPolygon('<%=@hunting_plot.boundary.to_s%>'),
  <%
  end
  %>
      zoom: 12
    };
    try {
      g_map = new MapsHelper('map-canvas', mapOptions);
    }
    catch (e) {
      alert("The following error occurred: " + e);
    }
    updateHuntingLocationStatus();
    PlotMapHelper.showLocations();
    PlotMapHelper.showMembers();
    PlotMapHelper.showWindConditions();
    $('#map-options-panel ul li input').change(
      function(event) {
        var isChecked = $(this).is(':checked');
        switch ($(this).attr('name')) {
          case 'satellite-checkbox':
          {
            g_map.setMapType( isChecked ? MapsHelper.MapTypes.Satellite : MapsHelper.MapTypes.Roadmap );
            break;
          }
          case 'members-checkbox':
          {
            if (isChecked) {
              PlotMapHelper.showMembers();
            }
            else {
              PlotMapHelper.hideMembers();
            }
            break;
          }
          case 'stands-checkbox':
          {
            if (isChecked) {
              PlotMapHelper.showLocations();
            }
            else {
              PlotMapHelper.hideLocations();
            }
            break;
          }
          case 'wind-forecast-checkbox':
          {
            if (isChecked) {
              PlotMapHelper.showWindConditions();
            }
            else {
              PlotMapHelper.hideWindConditions();
            }
            break;
          }
        }
      }
    );
  }
}
var PlotMapHelper = function() {
  var plotMembersMarkerTag = 'plot-members';
  var plotLocationsMarkerTag = 'hunting-locations';
  this.showMembers = function() {
    $.each(
      g_memberLocations,
      function(index, member_location) {
        g_map.addMarker(
          {
            title: member_location.user_name,
            coordinates: member_location.location_coordinates,
            icon: MapIcons.Hunter,
            zIndex: 3,
            infoWindowContent: '<div class="map-info-window"><p>' + escapeHtml(member_location.user_name) + '</p><p>' + escapeHtml(member_location.location_name) + '</p></div>'
          },
          plotMembersMarkerTag
        );
      }
    );
  }
  this.hideMembers = function() {
    g_map.clearMarkers(plotMembersMarkerTag);
  }
  this.showLocations = function() {
    $.each(
      g_huntingLocations,
      function(index, hunting_location) {
        if (hunting_location.mapMarker == null) {
          var markerIcon = MapIcons.HuntingLocationAvailable;
          if (isDefined(hunting_location.status)) {
            switch (hunting_location.status) {
              case HuntingLocationStatus.Available:
                markerIcon = MapIcons.HuntingLocationAvailable;
                break;
              case HuntingLocationStatus.Occupied:
                markerIcon = MapIcons.HuntingLocationOccupied;
                break;
              case HuntingLocationStatus.Reserved:
                markerIcon = MapIcons.HuntingLocationReserved;
                break;
            }
          }
          hunting_location.mapMarker = g_map.addMarker(
            {
              title: hunting_location.name,
              coordinates: hunting_location.coordinates,
              icon: markerIcon,
              zIndex: 2
            },
            plotLocationsMarkerTag
          );
        }
        var statusDescription = null;
        var statusDetails = null;
        switch (hunting_location.status) {
          case HuntingLocationStatus.Available:
            statusDescription = 'Available';
            break;
          case HuntingLocationStatus.Occupied:
            statusDescription = 'Occupied';
            var memberInLocation = getMemberInLocation(hunting_location.id)
            statusDetails = [ 'By: ' + memberInLocation.user_name ];
            break;
          case HuntingLocationStatus.Reserved:
            statusDescription = 'Reserved';
            var nextReservation = getNextReservationForLocation(hunting_location.id);
            statusDetails = [ 'At: ' + nextReservation.start_date_time.toLocaleTimeString(), 'By: ' + nextReservation.created_by ];
            break;
        }
        var infoWindowHtml =
          '<div class="map-info-window">' +
          '<p>' + escapeHtml(hunting_location.name) + '</p>' +
          '<p>Status: ' + statusDescription + '</p>';
        if (statusDetails != null) {
          for (var i = 0; i < statusDetails.length; i++)
            infoWindowHtml += ('<p>' + escapeHtml(statusDetails[i]) + '</p>');
        }
        infoWindowHtml += '</div>';
        hunting_location.mapMarker.setInfoWindow(infoWindowHtml);
        hunting_location.mapMarker.show();
      }
    );
  }
  this.hideLocations = function() {
    $.each(
      g_huntingLocations,
      function(index, hunting_location) {
        if (hunting_location.mapMarker != null) hunting_location.mapMarker.hide();
      }
    );
  }
  this.showWindConditions = function() {
    var svgDoc = $("#windIndicatorSvg");
    var windSpeedNode = svgDoc.find("#windSpeed");
    var windDirectionNode = svgDoc.find("#windDirection");
    windSpeedNode.text(g_windForecast.wind_mph);
    windDirectionNode.attr("transform", "rotate(" + g_windForecast.wind_degrees + " 25 25)");
    $('#map-wind-indicator').show();
    $('#wind-indicator-popup').html('Wind from the ' + g_windForecast.wind_dir + ' at ' + g_windForecast.wind_mph + ' mph');
  }
  this.hideWindConditions = function() {
    $('#map-wind-indicator').hide();
  }
  return this;
}();
var g_huntingLocations = <%==
    @hunting_plot.locations.collect do |hunting_location|
      {
        id: hunting_location.id,
        name: hunting_location.name,
        coordinates: {
          lat: hunting_location.coordinates.y(),
          lng: hunting_location.coordinates.x()
        }
      }
    end.to_json
  %>;
var g_huntingLocationReservations = <%==
  @hunting_location_schedules.collect do |hunting_location_schedule|
      {
        location_id: hunting_location_schedule.hunting_location_id,
        created_by: hunting_location_schedule.created_by.get_display_name,
        start_date_time: hunting_location_schedule.start_date_time,
        end_date_time: hunting_location_schedule.end_date_time,
      }
    end.to_json
  %>;
// convert date/time values to javascript dates
$.each(
  g_huntingLocationReservations,
  function(index, reservation) {
    reservation.start_date_time = new Date(reservation.start_date_time);
    reservation.end_date_time = new Date(reservation.end_date_time);
  }
);
var g_windForecast = <%==
  hourly_forecast = get_hourly_weather_forecast(@hunting_plot)
  forecast = {
    wind_dir: hourly_forecast[:forecast][0]['wdir']['dir'],
    wind_degrees: hourly_forecast[:forecast][0]['wdir']['degrees'],
    wind_mph: hourly_forecast[:forecast][0]['wspd']['english']
  }
  forecast.to_json %>;

var HuntingLocationStatus = function() {
  this.Available = 1;
  this.Occupied = 2;
  this.Reserved = 3;
  this.get_description = function(status) {
    switch (status) {
      case this.Available:
        return 'Available';
      case this.Occupied:
        return 'Occupied';
      case this.Reserved:
        return 'Reserved';
      default:
        return 'Unrecognized status'
    }
  }
  return this;
}();

function updateHuntingLocationStatus() {
  $.each(
    g_huntingLocations,
    function(index, hunting_location) {
      var memberInLocation = getMemberInLocation(hunting_location.id);
      if (memberInLocation != null) {
        updateHuntingLocationStatus(hunting_location, HuntingLocationStatus.Occupied);
        return;
      }
      else {
        var nextReservation = getNextReservationForLocation(hunting_location.id);
        if (nextReservation != null) {
          updateHuntingLocationStatus(hunting_location, HuntingLocationStatus.Reserved);
          return;
        }
      }
      updateHuntingLocationStatus(hunting_location, HuntingLocationStatus.Available);
    }
  );
  function updateHuntingLocationStatus(hunting_location, newStatus) {
    var statusChanged = (!isDefined(hunting_location.status) || (hunting_location.status != newStatus));
    hunting_location.status = newStatus;
    if (isDefined(hunting_location.mapMarker) && (statusChanged)) {
      switch (newStatus) {
        case HuntingLocationStatus.Available:
          hunting_location.mapMarker.setIcon(MapIcons.HuntingLocationAvailable);
          break;
        case HuntingLocationStatus.Occupied:
          hunting_location.mapMarker.setIcon(MapIcons.HuntingLocationOccupied);
          break;
        case HuntingLocationStatus.Reserved:
          hunting_location.mapMarker.setIcon(MapIcons.HuntingLocationReserved);
          break;
      }
    }
  }
}
function getNextReservationForLocation(location_id) {
  var reservation = null;
  for (var i = 0; i < g_huntingLocationReservations.length; i++) {
    if (g_huntingLocationReservations[i].location_id == location_id) {
      if ((reservation == null) || (g_huntingLocationReservations[i].start_date_time < reservation.start_date_time)) {
        reservation = g_huntingLocationReservations[i];
      }
      return reservation;
    }
  }
}
function getMemberInLocation(location_id) {
  for (var i = 0; i < g_memberLocations.length; i++) {
    if (g_memberLocations[i].location_id == location_id) {
      return g_memberLocations[i];
    }
  }
  return null;
}
</script>
<% end %>
<% content_for :panels do %>
<div data-role="panel" data-display="overlay" data-position="right" id="map-options-panel" class="right-align-panel">
  <ul data-role="listview">
    <li>
      <label>
        <input name="satellite-checkbox" id="satellite-checkbox" type="checkbox" data-role="flipswitch"> Satellite Imagery
      </label>
    </li>
    <li>
      <label>
        <input name="members-checkbox" id="members-checkbox" type="checkbox" data-role="flipswitch" checked="true"> Members <%= image_tag 'user_pin.png', size:'24x24' %>
      </label>
    </li>
    <li>
      <label>
        <input name="stands-checkbox" id="stands-checkbox" type="checkbox" data-role="flipswitch" checked="true"> Stands <%= image_tag 'hunting_location_available.png', size:'16x16' %>
      </label>
    </li>
    <li>
      <label>
        <input name="wind-forecast-checkbox" id="wind-forecast-checkbox" type="checkbox" data-role="flipswitch" checked="true"> Wind Conditions
      </label>
    </li>
  </ul>
  <a href="#header" data-rel="close" class="ui-btn ui-icon-delete ui-btn-icon-left" id="map-options-close-button">Close</a>
</div>
<% end %>
<div id="map-canvas" style="width:100%;height:100%;">Loading, please wait...</div>
<div id="map-options-popup" style="position:absolute; right: 0px;top: 100px;">
  <a class="ui-btn ui-btn-inline" href="#map-options-panel" title="Display Options" data-role="button"><%= image_tag 'layers.svg' %></a>
</div>

<div id="map-wind-indicator" style="position: absolute; right: 0px; bottom: 25px;">
  <a class="ui-btn ui-btn-inline" href="#wind-indicator-popup" data-transition="pop" data-rel="popup" style="padding:0.25em;">
    <svg id="windIndicatorSvg" xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 50 50">
      <defs>
        <marker id="Arrow" markerWidth="10" markerHeight="10" viewBox="-6 -6 12 12" refX="-2" refY="0" markerUnits="strokeWidth" orient="auto">
          <polygon points="-3,0 -4,4 4,0 -4,-4" fill="black" stroke="none" stroke-width="1px"/>
        </marker>
      </defs>
      <circle id="mycircle" fill="none" stroke="black" cx="25" cy="25" r="20" stroke-width="2px" />
      <text id="windSpeed" x="25" y="30" fill="black" font-size="12" font-weight="bold" text-anchor="middle">12</text>
      <line id="windDirection" x1="25" y1="4" x2="25" y2="5" stroke="black" stroke-width="2px" marker-end="url(#Arrow)" transform="rotate(0 25 25)" />
    </svg>
  </a>
  <div id="wind-indicator-popup" data-role="popup">This is popup</div>
</div>
